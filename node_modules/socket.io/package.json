{
  "name": "socket.io",
  "version": "0.9.13",
  "description": "Real-time apps made cross-browser & easy with a WebSocket-like API",
  "homepage": "http://socket.io",
  "keywords": [
    "websocket",
    "socket",
    "realtime",
    "socket.io",
    "comet",
    "ajax"
  ],
  "author": {
    "name": "Guillermo Rauch",
    "email": "guillermo@learnboost.com"
  },
  "contributors": [
    {
      "name": "Guillermo Rauch",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "Arnout Kazemier",
      "email": "info@3rd-eden.com"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    },
    {
      "name": "Einar Otto Stangvik",
      "email": "einaros@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/LearnBoost/socket.io.git"
  },
  "dependencies": {
    "socket.io-client": "0.9.11",
    "policyfile": "0.0.4",
    "base64id": "0.1.0",
    "redis": "0.7.3"
  },
  "devDependencies": {
    "expresso": "0.9.2",
    "should": "*",
    "benchmark": "0.2.2",
    "microtime": "0.1.3-1",
    "colors": "0.5.1",
    "redis": "0.7.2"
  },
  "optionalDependencies": {
    "redis": "0.7.3"
  },
  "main": "index",
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "# Socket.IO\r\n\r\nSocket.IO is a Node.JS project that makes WebSockets and realtime possible in\r\nall browsers. It also enhances WebSockets by providing built-in multiplexing,\r\nhorizontal scalability, automatic JSON encoding/decoding, and more.\r\n\r\n## How to Install\r\n\r\n```bash\r\nnpm install socket.io\r\n```\r\n\r\n## How to use\r\n\r\nFirst, require `socket.io`:\r\n\r\n```js\r\nvar io = require('socket.io');\r\n```\r\n\r\nNext, attach it to a HTTP/HTTPS server. If you're using the fantastic `express`\r\nweb framework:\r\n\r\n#### Express 3.x\r\n\r\n```js\r\nvar app = express()\r\n  , server = require('http').createServer(app)\r\n  , io = io.listen(server);\r\n\r\nserver.listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  socket.emit('news', { hello: 'world' });\r\n  socket.on('my other event', function (data) {\r\n    console.log(data);\r\n  });\r\n});\r\n```\r\n\r\n#### Express 2.x\r\n\r\n```js\r\nvar app = express.createServer()\r\n  , io = io.listen(app);\r\n\r\napp.listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  socket.emit('news', { hello: 'world' });\r\n  socket.on('my other event', function (data) {\r\n    console.log(data);\r\n  });\r\n});\r\n```\r\n\r\nFinally, load it from the client side code:\r\n\r\n```html\r\n<script src=\"/socket.io/socket.io.js\"></script>\r\n<script>\r\n  var socket = io.connect('http://localhost');\r\n  socket.on('news', function (data) {\r\n    console.log(data);\r\n    socket.emit('my other event', { my: 'data' });\r\n  });\r\n</script>\r\n```\r\n\r\nFor more thorough examples, look at the `examples/` directory.\r\n\r\n## Short recipes\r\n\r\n### Sending and receiving events.\r\n\r\nSocket.IO allows you to emit and receive custom events.\r\nBesides `connect`, `message` and `disconnect`, you can emit custom events:\r\n\r\n```js\r\n// note, io.listen(<port>) will create a http server for you\r\nvar io = require('socket.io').listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  io.sockets.emit('this', { will: 'be received by everyone' });\r\n\r\n  socket.on('private message', function (from, msg) {\r\n    console.log('I received a private message by ', from, ' saying ', msg);\r\n  });\r\n\r\n  socket.on('disconnect', function () {\r\n    io.sockets.emit('user disconnected');\r\n  });\r\n});\r\n```\r\n\r\n### Storing data associated to a client\r\n\r\nSometimes it's necessary to store data associated with a client that's\r\nnecessary for the duration of the session.\r\n\r\n#### Server side\r\n\r\n```js\r\nvar io = require('socket.io').listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  socket.on('set nickname', function (name) {\r\n    socket.set('nickname', name, function () { socket.emit('ready'); });\r\n  });\r\n\r\n  socket.on('msg', function () {\r\n    socket.get('nickname', function (err, name) {\r\n      console.log('Chat message by ', name);\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n#### Client side\r\n\r\n```html\r\n<script>\r\n  var socket = io.connect('http://localhost');\r\n\r\n  socket.on('connect', function () {\r\n    socket.emit('set nickname', prompt('What is your nickname?'));\r\n    socket.on('ready', function () {\r\n      console.log('Connected !');\r\n      socket.emit('msg', prompt('What is your message?'));\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\n### Restricting yourself to a namespace\r\n\r\nIf you have control over all the messages and events emitted for a particular\r\napplication, using the default `/` namespace works.\r\n\r\nIf you want to leverage 3rd-party code, or produce code to share with others,\r\nsocket.io provides a way of namespacing a `socket`.\r\n\r\nThis has the benefit of `multiplexing` a single connection. Instead of\r\nsocket.io using two `WebSocket` connections, it'll use one.\r\n\r\nThe following example defines a socket that listens on '/chat' and one for\r\n'/news':\r\n\r\n#### Server side\r\n\r\n```js\r\nvar io = require('socket.io').listen(80);\r\n\r\nvar chat = io\r\n  .of('/chat')\r\n  .on('connection', function (socket) {\r\n    socket.emit('a message', { that: 'only', '/chat': 'will get' });\r\n    chat.emit('a message', { everyone: 'in', '/chat': 'will get' });\r\n  });\r\n\r\nvar news = io\r\n  .of('/news');\r\n  .on('connection', function (socket) {\r\n    socket.emit('item', { news: 'item' });\r\n  });\r\n```\r\n\r\n#### Client side:\r\n\r\n```html\r\n<script>\r\n  var chat = io.connect('http://localhost/chat')\r\n    , news = io.connect('http://localhost/news');\r\n\r\n  chat.on('connect', function () {\r\n    chat.emit('hi!');\r\n  });\r\n\r\n  news.on('news', function () {\r\n    news.emit('woot');\r\n  });\r\n</script>\r\n```\r\n\r\n### Sending volatile messages.\r\n\r\nSometimes certain messages can be dropped. Let's say you have an app that\r\nshows realtime tweets for the keyword `bieber`. \r\n\r\nIf a certain client is not ready to receive messages (because of network slowness\r\nor other issues, or because he's connected through long polling and is in the\r\nmiddle of a request-response cycle), if he doesn't receive ALL the tweets related\r\nto bieber your application won't suffer.\r\n\r\nIn that case, you might want to send those messages as volatile messages.\r\n\r\n#### Server side\r\n\r\n```js\r\nvar io = require('socket.io').listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  var tweets = setInterval(function () {\r\n    getBieberTweet(function (tweet) {\r\n      socket.volatile.emit('bieber tweet', tweet);\r\n    });\r\n  }, 100);\r\n\r\n  socket.on('disconnect', function () {\r\n    clearInterval(tweets);\r\n  });\r\n});\r\n```\r\n\r\n#### Client side\r\n\r\nIn the client side, messages are received the same way whether they're volatile\r\nor not.\r\n\r\n### Getting acknowledgements\r\n\r\nSometimes, you might want to get a callback when the client confirmed the message\r\nreception.\r\n\r\nTo do this, simply pass a function as the last parameter of `.send` or `.emit`.\r\nWhat's more, when you use `.emit`, the acknowledgement is done by you, which\r\nmeans you can also pass data along:\r\n\r\n#### Server side\r\n\r\n```js\r\nvar io = require('socket.io').listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  socket.on('ferret', function (name, fn) {\r\n    fn('woot');\r\n  });\r\n});\r\n```\r\n\r\n#### Client side\r\n\r\n```html\r\n<script>\r\n  var socket = io.connect(); // TIP: .connect with no args does auto-discovery\r\n  socket.on('connect', function () { // TIP: you can avoid listening on `connect` and listen on events directly too!\r\n    socket.emit('ferret', 'tobi', function (data) {\r\n      console.log(data); // data will be 'woot'\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\n### Broadcasting messages\r\n\r\nTo broadcast, simply add a `broadcast` flag to `emit` and `send` method calls.\r\nBroadcasting means sending a message to everyone else except for the socket\r\nthat starts it.\r\n\r\n#### Server side\r\n\r\n```js\r\nvar io = require('socket.io').listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  socket.broadcast.emit('user connected');\r\n  socket.broadcast.json.send({ a: 'message' });\r\n});\r\n```\r\n\r\n### Rooms\r\n\r\nSometimes you want to put certain sockets in the same room, so that it's easy\r\nto broadcast to all of them together.\r\n\r\nThink of this as built-in channels for sockets. Sockets `join` and `leave`\r\nrooms in each socket.\r\n\r\n#### Server side\r\n\r\n```js\r\nvar io = require('socket.io').listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  socket.join('justin bieber fans');\r\n  socket.broadcast.to('justin bieber fans').emit('new fan');\r\n  io.sockets.in('rammstein fans').emit('new non-fan');\r\n});\r\n```\r\n\r\n### Using it just as a cross-browser WebSocket\r\n\r\nIf you just want the WebSocket semantics, you can do that too.\r\nSimply leverage `send` and listen on the `message` event:\r\n\r\n#### Server side\r\n\r\n```js\r\nvar io = require('socket.io').listen(80);\r\n\r\nio.sockets.on('connection', function (socket) {\r\n  socket.on('message', function () { });\r\n  socket.on('disconnect', function () { });\r\n});\r\n```\r\n\r\n#### Client side\r\n\r\n```html\r\n<script>\r\n  var socket = io.connect('http://localhost/');\r\n  socket.on('connect', function () {\r\n    socket.send('hi');\r\n\r\n    socket.on('message', function (msg) {\r\n      // my msg\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\n### Changing configuration\r\n\r\nConfiguration in socket.io is TJ-style:\r\n\r\n#### Server side\r\n\r\n```js\r\nvar io = require('socket.io').listen(80);\r\n\r\nio.configure(function () {\r\n  io.set('transports', ['websocket', 'flashsocket', 'xhr-polling']);\r\n});\r\n\r\nio.configure('development', function () {\r\n  io.set('transports', ['websocket', 'xhr-polling']);\r\n  io.enable('log');\r\n});\r\n```\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2011 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/LearnBoost/socket.io/issues"
  },
  "_id": "socket.io@0.9.13",
  "dist": {
    "shasum": "035f7fa7ddb69af72dbab5c34c536c8c00b15fef"
  },
  "_from": "socket.io"
}
